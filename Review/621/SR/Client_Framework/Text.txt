클라이언트 프로젝트를 제거 후 클라이언트 프로젝트 폴더에 폴더를 4개 추가

1. Bin					// 실행 파일 등 바이너리화 되어있는 파일 위치(빌드 결과물)
2. Codes				// 소스 파일
3. Headers				// 헤더 파일
4. Includes(Default)	// 기본 폴더 프로젝트 생성 시 생성된 기본 파일을 집어넣음

솔루션 -> 새 솔루션 폴더 -> 

00.Client 솔루션 폴더 생성
01.Engine 솔루션 폴더 생성(DLL 수업 이후)

클래스 추가 시 헤더 파일과 소스 파일의 경로를 직접 입력

프로젝트 우클릭 -> 속성 -> 출력 디렉터리 변경
출력 디렉토리 : 빌드 결과물이 생성될 디렉터리

속성 -> c/c++ -> 일반 -> 추가 포함 디렉터리

./
../Headers
../Codes

PeekMessage : 메시지를 엿보는 함수 (Message가 있으면 True, Message가 없으면 False)
GetMessage : 메시지가 있으면 True, 메시지가 없으면 블로킹, Quit 메시지는 False

TranslateMessage : 키보드의 입력을 문자화 해줌?
DispatchMessage : 메시지 함수를 호출

Instance : 실체화 된 데이터? (메모리에 등록된 데이터)
			컴퓨터 저장공간에서 할당된 실체

Libary 파일 : 함수나 클래스, 그 외 기능들을 바이너리화 하여 모아놓은 파일(배포 하기 위한 파일)

정적 링크 라이브러리 : 런타임 이전
동적 링크 라이브러리 : 런타임 이후

바인딩 : 변수나 배열 등 프로그램의 성격이나 속성을 결정지어주는 것

대표적인 정적 바인딩 정적 배열 (컴파일 이전에 배열의 크기가 결정)
대표적인 동적 바인딩 동적 배열 (컴파일 이후에 런타임 배열의 크기가 결정)

virtual 키워드 : 컴파일 시점에 함수를 호출 하지 말아라 (동적 바인딩) 정적 바인딩만으로 다형성에 제약이 따른다.
가상 함수 포인터와 가상 함수 테이블은 컴파일 시점에 만들어 놓음
-> 완전한 동적 바인딩이 아니다.

(코드 작성) -> 전처리 -> 컴파일 -> 어셈블러 -> 링크 -> 런타임(실행 파일 생성)

컴파일
코드 -> 어셈블리어

어셈블러
어셈브리어 -> 바이너리 코드

정적 링크 라이브러리 
-> 실행의 독립성이 보장된다.
-> 실행 파일이 커진다.(라이브러리 파일을 실행파일이 포함하고 있기 떄문에 메모리를 많이 차지한다.)
-> 유지 보수가 불편하다.

동적 링크 라이브러리
->	실행 파일의 독립성을 보장되지 않는다.
->	메모리를 효율적으로 쓸 수 있다.
->	유지 보수가 유연하다.(DLL 파일을 수정 할 경우가 생겼을 때 DLL 파일만 수정하면 된다.)

프로세스 : 메모리를 차지하는 프로그램

/////////////
엔진 솔루션 win32 프로젝트 생성 -> 응용프로그램 종류를 DLL로 변경 -> 빈 프로젝트 생성 -> SDL 검사 체크

DLL에서의 lib 파일의 역할은 dll 파일에 해당 DLL의 함수가 정의 되어 있음을 확인해줌

링커 -> 일반 -> 추가 라이브러리 디렉토리에 라이브러리 파일의 경로 추가
추가 종속성에 라이브러리 추가 Engine.lib
DLL 파일은 실행파일과 같은 위치에 있거나 따로 경로를 지정해줘야된다.

프로젝트 define

프로젝트 속성 -> 전처리기 -> 전처리기 정의에 define 추가

링커 추가 종속성
d3d9.lib
d3d9x.lib 추가

렌더링 파이프라인

로컬 -> 월드 -> 뷰 -> 투영 -> 뷰포트


게임오브젝트에 컴포넌트 얻어오는 함수 작성

MainApp ReadyDefaultSetting 함수 생성

VIBuffer_RectColor 클래스 생성

렌더링 파이프 라인

3차원 공간을 2차원 공간으로 옮겨놓는 작업
로컬 스페이스 -> 월드 스페이스 -> 뷰 스페이스 (-> 후면 추려내기 -> 조명 ->) 투영 스페이스 (-> 클리핑 ->) 뷰 포트 -> 레스터 라이즈 -> 픽셀 쉐이더

정점 쉐이더 (정점을 변환하는 과정)
로컬 스페이스 ~ 뷰 포트

픽셀 쉐이더 (픽셀에 색상을 입히는 과정)
픽셀 쉐이드

레스터 라이즈 : 픽셀의 정보를 만드는 단계

뷰스페이스 : 카메라 시점의 공간

D3DXMartrixLookAtLH() : 뷰 행렬을 만드는 함수

D3DTS_VIEW : view 행렬을 명시

투영 스페이스 : 

원근투영
- 카메라의 거리에 따라 크기가 달라짐(Default)
- x, y의 값을 z로 나눔

직교투영 
- 카메라의 거리에 상관없이 크기가 같음(UI)
- x, y의 값은 그대로 두고 z 값만 삭제

D3DXMartixPerspectiveFovLH
원근 투영 행렬을 만듬
Fov Field of View

D3DXMartixOrthoLH
직교 투영 행렬

카메라와 근평면 간의 거리 : near
카메라의 원평견 간의 거리 : far

프레임이 떨어지면 far를 줄임

D3DTS_PROJ : 투영 행렬임을 명시

set_renderstate :
D3DCULL_CCW		:	반시계 방향 추려내기(Default)
D3DCULL_CW		:	시계 방향 추려내기
D3DCULL_NONE	:	추려내기 off
D3DRS_CULLMODE, D3DCULL_NONE : 후면 추려내기 off

월드 행렬은 현재 로컬 스페이스에서의 변화를 의미함.
로컬 스페이스가 항등 상태일 떄 월드 행렬은 현재 오브젝트의 상태를 의미한다.

뷰행렬은 카메라의 역행렬

카메라와의 거리는 뷰스페이스에서는 해당 오브젝트에서의 z 값

투영 : n 차원을 n - 1 차원으로 변환 ( 3차원의 정점을 2차원의 정점으로 변환)

백버퍼에는 z값을 기록
픽셀은 색상 뿐만 아니라 z값을 보관하는 메모리가 필요함.

Z Buffer : 실수 타입으로 보관함 (0 ~ 1) 

레스터 라이즈는 픽셀 정보를 만드는 단계
픽셀의 색상은 픽셀 쉐이더에서 채움.
