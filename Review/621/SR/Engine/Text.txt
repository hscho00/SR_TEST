클라이언트 프로젝트를 제거 후 클라이언트 프로젝트 폴더에 폴더를 4개 추가

1. Bin					// 실행 파일 등 바이너리화 되어있는 파일 위치(빌드 결과물)
2. Codes				// 소스 파일
3. Headers				// 헤더 파일
4. Includes(Default)	// 기본 폴더 프로젝트 생성 시 생성된 기본 파일을 집어넣음

솔루션 -> 새 솔루션 폴더 -> 

00.Client 솔루션 폴더 생성
01.Engine 솔루션 폴더 생성(DLL 수업 이후)

클래스 추가 시 헤더 파일과 소스 파일의 경로를 직접 입력

프로젝트 우클릭 -> 속성 -> 출력 디렉터리 변경
출력 디렉토리 : 빌드 결과물이 생성될 디렉터리

속성 -> c/c++ -> 일반 -> 추가 포함 디렉터리

./
../Headers
../Codes

PeekMessage : 메시지를 엿보는 함수 (Message가 있으면 True, Message가 없으면 False)
GetMessage : 메시지가 있으면 True, 메시지가 없으면 블로킹, Quit 메시지는 False

TranslateMessage : 키보드의 입력을 문자화 해줌?
DispatchMessage : 메시지 함수를 호출

Instance : 실체화 된 데이터? (메모리에 등록된 데이터)
			컴퓨터 저장공간에서 할당된 실체

Libary 파일 : 함수나 클래스, 그 외 기능들을 바이너리화 하여 모아놓은 파일(배포 하기 위한 파일)

정적 링크 라이브러리 : 런타임 이전
동적 링크 라이브러리 : 런타임 이후

바인딩 : 변수나 배열 등 프로그램의 성격이나 속성을 결정지어주는 것

대표적인 정적 바인딩 정적 배열 (컴파일 이전에 배열의 크기가 결정)
대표적인 동적 바인딩 동적 배열 (컴파일 이후에 런타임 배열의 크기가 결정)

virtual 키워드 : 컴파일 시점에 함수를 호출 하지 말아라 (동적 바인딩) 정적 바인딩만으로 다형성에 제약이 따른다.
가상 함수 포인터와 가상 함수 테이블은 컴파일 시점에 만들어 놓음
-> 완전한 동적 바인딩이 아니다.

(코드 작성) -> 전처리 -> 컴파일 -> 어셈블러 -> 링크 -> 런타임(실행 파일 생성)

컴파일
코드 -> 어셈블리어

어셈블러
어셈브리어 -> 바이너리 코드

정적 링크 라이브러리 
-> 실행의 독립성이 보장된다.
-> 실행 파일이 커진다.(라이브러리 파일을 실행파일이 포함하고 있기 떄문에 메모리를 많이 차지한다.)
-> 유지 보수가 불편하다.

동적 링크 라이브러리
->	실행 파일의 독립성을 보장되지 않는다.
->	메모리를 효율적으로 쓸 수 있다.
->	유지 보수가 유연하다.(DLL 파일을 수정 할 경우가 생겼을 때 DLL 파일만 수정하면 된다.)

프로세스 : 메모리를 차지하는 프로그램

/////////////
엔진 솔루션 win32 프로젝트 생성 -> 응용프로그램 종류를 DLL로 변경 -> 빈 프로젝트 생성 -> SDL 검사 체크

DLL에서의 lib 파일의 역할은 dll 파일에 해당 DLL의 함수가 정의 되어 있음을 확인해줌

링커 -> 일반 -> 추가 라이브러리 디렉토리에 라이브러리 파일의 경로 추가
추가 종속성에 라이브러리 추가 Engine.lib
DLL 파일은 실행파일과 같은 위치에 있거나 따로 경로를 지정해줘야된다.

프로젝트 define

프로젝트 속성 -> 전처리기 -> 전처리기 정의에 define 추가

링커 추가 종속성
d3d9.lib
d3d9x.lib 추가


// 201118 begin

// Define 되어 있는 Destroy_Instance 수정 (레퍼런스 카운트 삽입 및 Delete 코드 수정)

// namespace 추가 (Engine)

// define
#define BEGIN(NAME) namespace Name {
#define	END	}
#define USING(Name) using namespace Name;

// Management 클래스 추가

// 레퍼런스 카운터를 증가시키는 기준
-> 외부 포인터를 참조 할 때(외부 클래스의 멤버 변수의 포인터를 참조 할 때)
-> 소유자가 있는 포인터를 참조할 때
-> 최초 소유자가 아니면 무조건 증가.....

// explicit
// 묵시적 형변환을 방지하기 위해
// 명시적 형변환으로만 클래스를 생성 할 수 있게( c++ 스타일 강제)
// 인자있는 생성자를 작성할 때 무조건 사용

// 201119 Begin

// GameObject 클래스 추가

// 게임 오브젝트 초기화 두 가지 버전 추가
// 프로토 타입 초기화, 클론 초기화

// Component 클래스 추가
// 컴포넌트도 프로토 패턴 사용

솔루션 폴더에 텍스트 문서 생성
UpdateLib.bat
확장자 bat : 배치 파일(윈도우 시스템 명령 파일)

명령어 / 옵션 / 복사할 디렉터리 / 붙여넣을 디렉터리

// 명령어
xcopy	:	복사 붙여넣기

// 옵션
/Y		:	기존 대상 파일을 덮어씌울지를 묻지 않음

// 경로

/